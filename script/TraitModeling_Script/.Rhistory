dev.off()
fleshy <- setNames(data$fleshy, rownames(data))
levels(fleshy) <- unique(data$fleshy)
fleshy.ER <- fitpolyMk(S, fleshy, model = "ER")
fleshyxx <- apply(fleshy.ER$data,1,
function(x,ss) ss[which(x==1)],
ss=colnames(fleshy.ER$data))
fleshyxx <- gsub("+","/", fleshyxx, fixed=TRUE)
fleshy.data <- data.frame(Genus_sp = names(fleshyxx), fleshy = fleshyxx)
fleshy_rate.mat <- fleshy.ER$index.matrix
fleshy_rate.mat[fleshy_rate.mat==0] <- NA
colnames(fleshy_rate.mat) <- rownames(fleshy_rate.mat) <- gsub("+","/", colnames(fleshy_rate.mat), fixed=TRUE)
fleshyind <- order(colnames(fleshy_rate.mat))
fleshy_rate.mat <- fleshy_rate.mat[fleshyind, fleshyind]
fleshy_fit.marginal <- corHMM(S, fleshy.data,
rate.mat = fleshy_rate.mat,
node.states = "marginal",
rate.cat = 1, p = fleshy.ER$rates,
root.p = fleshy.ER$pi)
fleshyasr <- fleshy_fit.marginal$states
colnames(fleshyasr) <- colnames(fleshy_rate.mat)
colnames(fleshyasr) <- gsub("/","+", colnames(fleshyasr))
svg("/home/guerbrown/github_local/biol-4386-course-project-guerbrown/output/inqcophy_traitmodeling_fleshy_guerbrown.svg", width = 20, height = 10)
fleshypp <- matrix(0, length(fleshy), 3, dimnames = list(names(fleshy), c("0", "1", "1+0")))
plot.phylo(S, type = "fan", cex = 1.1, align.tip.label = F, lwd = 2, label.offset = 0.05, use.edge.length = F, open.angle =  163, node.depth = 100)
fleshyX <- strsplit(setNames(as.character(fleshy_rate.mat), names(fleshy_rate.mat)),"+", fixed=TRUE)
pies <- matrix(0, Ntip(S),2,
dimnames=list(S$tip.label,
c("0", "1")))
for(i in 1:Ntip(S))
pies[S$tip.label[i],
fleshyX[[S$tip.label[i]]]]<-
rep(1/length(fleshyX[[S$tip.label[i]]]),
length(fleshyX[[S$tip.label[i]]]))
fleshycols <- setNames(c("firebrick1", "dodgerblue1", "grey15"),
c("0", "1"))
par(fg="white")
fleshy <- setNames(data$fleshy, data$Synergus)
fleshyxx <- strsplit(as.character(fleshy), split = "+", fixed = T)
fleshypp <- matrix(0, length(fleshy), 3, dimnames = list(names(fleshy), c("0", "1", "1+0")))
for (i in 1:nrow(fleshypp)) fleshypp[i,fleshyxx[[i]]]<-1/length(fleshyxx[[i]])
tiplabels(pie = fleshypp, piecol = fleshycols, cex=0.3)
par(fg="white")
piecol <- fleshycols
for(i in 1:ncol(fleshyasr)){
fleshynn <- strsplit(colnames(fleshyasr)[i],"+", fixed=TRUE)[[1]]
if(length(fleshynn)==1) piecol[i] <- fleshycols[fleshynn]
else if(length(fleshynn)==2) piecol[i] <- colorRampPalette(fleshycols[fleshynn])(3)[2]
else piecol[i]<-"black"
}
names(piecol)<-colnames(fleshyasr)
par(fg="white")
nodelabels(pie = fleshyasr, piecol = fleshycols,cex=0.40)
par(fg="black")
legend("bottom", c("Not Fleshy", "Fleshy", "Both"), pch = 21, pt.bg = c("firebrick1", "dodgerblue1", "grey15"), pt.cex = 2, cex = 1)
dev.off()
season <- setNames(data$season, rownames(data))
levels(season) <- unique(data$season)
season.ER <- fitpolyMk(S, season, model = "ER")
seasonxx <- apply(season.ER$data,1,
function(x,ss) ss[which(x==1)],
ss=colnames(season.ER$data))
seasonxx <- gsub("+","/", seasonxx, fixed=TRUE)
season.data <- data.frame(Genus_sp = names(seasonxx), season = seasonxx)
season_rate.mat <- season.ER$index.matrix
season_rate.mat[season_rate.mat==0] <- NA
colnames(season_rate.mat) <- rownames(season_rate.mat) <- gsub("+","/", colnames(season_rate.mat), fixed=TRUE)
seasonind <- order(colnames(season_rate.mat))
season_rate.mat <- season_rate.mat[seasonind, seasonind]
season_fit.marginal <- corHMM(S, season.data,
rate.mat = season_rate.mat,
node.states = "marginal",
rate.cat = 1, p = season.ER$rates,
root.p = season.ER$pi)
seasonasr <- season_fit.marginal$states
colnames(seasonasr) <- colnames(season_rate.mat)
colnames(seasonasr) <- gsub("/","+", colnames(seasonasr))
svg("/home/guerbrown/github_local/biol-4386-course-project-guerbrown/output/inqcophy_traitmodeling_season_guerbrown.svg", width = 20, height = 10)
seasonpp <- matrix(0, length(season), 3, dimnames = list(names(season), c("3", "2", "2+3")))
plot.phylo(S, type = "fan", cex = 1.1, align.tip.label = F, lwd = 2, label.offset = 0.05, use.edge.length = F, open.angle =  163, node.depth = 100)
seasonX <- strsplit(setNames(as.character(season_rate.mat), names(season_rate.mat)),"+", fixed=TRUE)
pies <- matrix(0, Ntip(S),3,
dimnames=list(S$tip.label,
c("3", "2", "2+3")))
for(i in 1:Ntip(S))
pies[S$tip.label[i],
seasonX[[S$tip.label[i]]]]<-
rep(1/length(seasonX[[S$tip.label[i]]]),
length(seasonX[[S$tip.label[i]]]))
seasoncols <- setNames(c("firebrick1", "dodgerblue1", "grey15"),
c("0", "1"))
par(fg="white")
season <- setNames(data$season, data$Synergus)
seasonxx <- strsplit(as.character(season), split = "+", fixed = T)
seasonpp <- matrix(0, length(season), 3, dimnames = list(names(season), c("3", "2", "2+3")))
for (i in 1:nrow(seasonpp)) seasonpp[i,seasonxx[[i]]]<-1/length(seasonxx[[i]])
tiplabels(pie = seasonpp, piecol = seasoncols, cex=0.3)
par(fg="white")
piecol <- seasoncols
for(i in 1:ncol(seasonasr)){
seasonnn <- strsplit(colnames(seasonasr)[i],"+", fixed=TRUE)[[1]]
if(length(seasonnn)==1) piecol[i] <- seasoncols[seasonnn]
else if(length(seasonnn)==2) piecol[i] <- colorRampPalette(seasoncols[seasonnn])(3)[2]
else piecol[i]<-"black"
}
names(piecol)<-colnames(seasonasr)
par(fg="white")
nodelabels(pie = seasonasr, piecol = seasoncols,cex=0.40)
par(fg="black")
legend("bottom", c("Fall", "Summer", "Fall+Summer"), pch = 21, pt.bg = c("firebrick1", "dodgerblue1", "grey15"), pt.cex = 2, title = "Season", cex = 1)
dev.off()
location <- setNames(data$location, rownames(data))
levels(location) <- unique(data$location)
location.ER <- fitpolyMk(S, location, model = "ER")
locationxx <- apply(location.ER$data,1,
function(x,ss) ss[which(x==1)],
ss=colnames(location.ER$data))
locationxx <- gsub("+","/", locationxx, fixed=TRUE)
location.data <- data.frame(Genus_sp = names(locationxx), location = locationxx)
location_rate.mat <- location.ER$index.matrix
location_rate.mat[location_rate.mat==0] <- NA
colnames(location_rate.mat) <- rownames(location_rate.mat) <- gsub("+","/", colnames(location_rate.mat), fixed=TRUE)
locationind <- order(colnames(location_rate.mat))
location_rate.mat <- location_rate.mat[locationind, locationind]
location_fit.marginal <- corHMM(S, location.data,
rate.mat = location_rate.mat,
node.states = "marginal",
rate.cat = 1, p = location.ER$rates,
root.p = location.ER$pi)
locationasr <- location_fit.marginal$states
colnames(locationasr) <- colnames(location_rate.mat)
colnames(locationasr) <- gsub("/","+", colnames(locationasr))
locationasr[,"acorn"] <- locationasr[,"acorn"] + 1/2*(locationasr)[,2] + 1/3*(locationasr[,3]) + 1/4*(locationasr[,4]) + 1/5*(locationasr[,5]) + 1/4*(locationasr[,6]) + 1/3*(locationasr[,7]) + 1/4*(locationasr[,8]) + 1/3*(locationasr[,9]) + 1/2*(locationasr[,10]) + 1/3*(locationasr[,11]) + 1/4*(locationasr[,12]) + 1/3*(locationasr[,13]) + 1/2*(locationasr[,14]) + 1/3*(locationasr[,15]) + 1/2*(locationasr[,16])
locationasr[,"bud"] <- locationasr[,"bud"] + 1/2*(locationasr)[,2] + 1/3*(locationasr[,3]) + 1/4*(locationasr[,4]) + 1/5*(locationasr[,5]) + 1/4*(locationasr[,6]) + 1/3*(locationasr[,7]) + 1/4*(locationasr[,8]) + 1/3*(locationasr[,9]) + 1/2*(locationasr[,18]) + 1/3*(locationasr[,19]) + 1/4*(locationasr[,20]) + 1/3*(locationasr[,21]) + 1/2*(locationasr[,22]) + 1/3*(locationasr[,23]) + 1/2*(locationasr[,24])
locationasr[,"leaf"] <- locationasr[,"leaf"] + 1/3*(locationasr[,3]) + 1/4*(locationasr[,4]) + 1/5*(locationasr[,5]) + 1/4*(locationasr[,6]) + 1/2*(locationasr[,10]) + 1/3*(locationasr[,11]) + 1/4*(locationasr[,12]) + 1/3*(locationasr[,13]) + 1/2*(locationasr[,18]) + 1/3*(locationasr[,19]) + 1/4*(locationasr[,20]) + 1/3*(locationasr[,21]) + 1/2*(locationasr[,26]) + 1/3*(locationasr[,27]) + 1/2*(locationasr[,28])
locationasr[,"petiole"] <- locationasr[,"petiole"] + 1/4*(locationasr[,4]) + 1/5*(locationasr[,5]) + 1/3*(locationasr[,7]) + 1/4*(locationasr[,8]) + 1/3*(locationasr[,11]) + 1/4*(locationasr[,12]) + 1/3*(locationasr[,15]) + 1/3*(locationasr[,19]) + 1/4*(locationasr[,20]) + 1/2*(locationasr[,22]) + 1/3*(locationasr[,23]) + 1/2*(locationasr[,26]) + 1/3*(locationasr[,27]) + 1/2*(locationasr[,30])
locationasr[,"stem"] <- locationasr[,"stem"] + 1/5*(locationasr[,5]) + 1/4*(locationasr[,6]) + 1/4*(locationasr[,8]) + 1/3*(locationasr[,9]) + 1/4*(locationasr[,12]) + 1/3*(locationasr[,13]) + 1/3*(locationasr[,15]) + 1/2*(locationasr[,16]) + 1/4*(locationasr[,20]) + 1/3*(locationasr[,21]) + 1/3*(locationasr[,23]) + 1/2*(locationasr[,24]) + 1/3*(locationasr[,27]) + 1/2*(locationasr[,28]) + 1/2*(locationasr[,30])
locationasr <- data.frame(locationasr[,"acorn"], locationasr[,"bud"], locationasr[,"leaf"], locationasr[,"petiole"], locationasr[,"stem"])
#svg("/home/guerbrown/github_local/biol-4386-course-project-guerbrown/output/inqcophy_traitmodeling_location_guerbrown.svg", width = 20, height = 10)
locationpp <- matrix(0, length(location), 5, dimnames = list(names(location), c("acorn", "bud", "leaf", "petiole", "stem")))
plot.phylo(S, type = "fan", cex = 1.1, align.tip.label = F, lwd = 2, label.offset = 0.05, use.edge.length = F, open.angle =  163, node.depth = 100)
locationX <- strsplit(setNames(as.character(location_rate.mat), names(location_rate.mat)),"+", fixed=TRUE)
pies <- matrix(0, Ntip(S),5,
dimnames=list(S$tip.label,
c("acorn", "bud", "leaf", "petiole", "stem")))
for(i in 1:Ntip(S))
pies[S$tip.label[i],
locationX[[S$tip.label[i]]]]<-
rep(1/length(locationX[[S$tip.label[i]]]),
length(locationX[[S$tip.label[i]]]))
locationcols <- setNames(c("firebrick1", "dodgerblue1", "gold1", "grey15", "green"),
c("0", "1"))
par(fg="white")
location <- setNames(data$location, data$Synergus)
locationxx <- strsplit(as.character(location), split = "+", fixed = T)
locationpp <- matrix(0, length(location), 5, dimnames = list(names(location), c("acorn", "bud", "leaf", "petiole", "stem")))
for (i in 1:nrow(locationpp)) locationpp[i,locationxx[[i]]]<-1/length(locationxx[[i]])
tiplabels(pie = locationpp, piecol = locationcols, cex=0.3)
par(fg="white")
piecol <- locationcols
for(i in 1:ncol(locationasr)){
locationnn <- strsplit(colnames(locationasr)[i],"+", fixed=TRUE)[[1]]
if(length(locationnn)==1) piecol[i] <- locationcols[locationnn]
else if(length(locationnn)==2) piecol[i] <- colorRampPalette(locationcols[locationnn])(3)[2]
else piecol[i]<-"black"
}
names(piecol)<-colnames(locationasr)
par(fg="white")
nodelabels(pie = locationasr, piecol = locationcols,cex=0.40)
par(fg="black")
legend("bottom", c("acorn", "bud", "leaf", "petiole", "stem"), pch = 21, pt.bg = c(locationcols), pt.cex = 2, title = "location", cex = 1)
#dev.off()
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(phytools)
library(geiger)
library(corHMM)
setwd("//wsl.localhost/Ubuntu/home/guerbrown/github_local/biol-4386-course-project-guerbrown/data/TraitModeling")
tree <- "//wsl.localhost/Ubuntu/home/guerbrown/github_local/biol-4386-course-project-guerbrown/data/TraitModeling/inqcophy_traitmodeling_SynTree_guerbrown.nex"
traits <- "//wsl.localhost/Ubuntu/home/guerbrown/github_local/biol-4386-course-project-guerbrown/data/TraitModeling/inqcophy_traitmodeling_TraitData_guerbrown.csv"
# Import
S <- readNexus(tree)
# Rooting the phylogeny based on a version of the tree with an outgroup and plotting
root.phylo(S, 28, resolve.root = T)
# Importing the .csv file with our traits
data <- read.csv(traits, row.names = 1)
# First, lets isolate the variable we want to graphically model from the original imported data frame
oak_section <- setNames(data$oak_section, rownames(data))
# Rename the levels of the variable
levels(oak_section) <- unique(data$oak_section)
# Recapitulation of the best fit model (see model selection script)
oak_section.ER <- ace(oak_section, S, model = "ER", type = "discrete")
# The model currenlty includes an intermediate state, let's break this intermediate state into the two discrete traits.
oak_section.ER$lik.anc[,1] <- oak_section.ER$lik.anc[,1] + 1/2*(oak_section.ER$lik.anc[,4])
oak_section.ER$lik.anc[,2] <- oak_section.ER$lik.anc[,2] + 1/2*(oak_section.ER$lik.anc[,4])
oak_section.ER$lik.anc <- data.frame(oak_section.ER$lik.anc[,1],oak_section.ER$lik.anc[,2], oak_section.ER$lik.anc[,3])
# Set colors for the pie charts
oak_sectioncols <- c("firebrick1", "grey50", "dodgerblue")
# Now we have the data organized in a way that makes it accessible to the program and we can begin computing the graphical output of the figure. First, I want to save these automatically as vector graphics, so I'll use this function to initiate it.
svg("/home/guerbrown/github_local/biol-4386-course-project-guerbrown/output/inqcophy_traitmodeling_oak_section_guerbrown.svg", width = 20, height = 10)
# Plot the tree in a phylo space with the layout of your choosing
plot.phylo(S, type = "fan", cex = 1.1, align.tip.label = F, lwd = 2, label.offset = 0.05, use.edge.length = F, open.angle =  163, node.depth = 100)
# Create a simple data frame with the variables based on the taxa
oak_section_DATA <- setNames(data$oak_section, data$Synergus)
# Split the names of the variable names and list a new object
oak_sectionxx <- strsplit(as.character(oak_section_DATA), split = "+", fixed = T)
# Create a matrix with the variables from the _DATA file by providing lists of occurrence or absence of particular variables for each taxa
oak_sectionpp <- matrix(0, length(oak_section_DATA), 4, dimnames = list(names(oak_section_DATA), c("Lobatae","Quercus", "Virentes", "Quercus+Virentes")))
# Convert this matrix into a matrix of percentages by marking presence as 1 and divide it by the length of the data frame, effectively providign a value of the proportion
for (i in 1:nrow(oak_sectionpp)) oak_sectionpp[i,oak_sectionxx[[i]]]<-1/length(oak_sectionxx[[i]])
par(fg = "transparent")
# Adding tip labels using this proportional matrix using the previously listed colors
ape::tiplabels(pie = oak_sectionpp, piecol = oak_sectioncols, cex = 0.25)
par(fg = "white")
# Addingthe node labels based on our likely ancestor from the model recapitulation.
nodelabels( node = 1:S$Nnode+Ntip(S),
pie = oak_section.ER$lik.anc, piecol = oak_sectioncols, cex=0.4)
par(fg = "black")
# Providing a legend
legend("bottom", c("Red Oaks (sect. Lobatae)", "White Oaks (sect. Quercus)", "Live Oaks (sect. Virentes)"), pch = 21, pt.bg = c(oak_sectioncols), pt.cex = 2, title = "Oak Section", cex = 1)
# Telling the program we are done creating an image. This results in whatever is plotted being saved
dev.off()
# First, lets isolate the variable we want to graphically model from the original imported data frame
oak_section <- setNames(data$oak_section, rownames(data))
# Rename the levels of the variable
levels(oak_section) <- unique(data$oak_section)
# Recapitulation of the best fit model (see model selection script)
oak_section.ER <- ace(oak_section, S, model = "ER", type = "discrete")
# The model currenlty includes an intermediate state, let's break this intermediate state into the two discrete traits.
oak_section.ER$lik.anc[,1] <- oak_section.ER$lik.anc[,1] + 1/2*(oak_section.ER$lik.anc[,4])
oak_section.ER$lik.anc[,2] <- oak_section.ER$lik.anc[,2] + 1/2*(oak_section.ER$lik.anc[,4])
oak_section.ER$lik.anc <- data.frame(oak_section.ER$lik.anc[,1],oak_section.ER$lik.anc[,2], oak_section.ER$lik.anc[,3])
# Set colors for the pie charts
oak_sectioncols <- c("firebrick1", "grey50", "dodgerblue")
# Now we have the data organized in a way that makes it accessible to the program and we can begin computing the graphical output of the figure. First, I want to save these automatically as vector graphics, so I'll use this function to initiate it.
#svg("/home/guerbrown/github_local/biol-4386-course-project-guerbrown/output/inqcophy_traitmodeling_oak_section_guerbrown.svg", width = 20, height = 10)
# Plot the tree in a phylo space with the layout of your choosing
plot.phylo(S, type = "fan", cex = 1.1, align.tip.label = F, lwd = 2, label.offset = 0.05, use.edge.length = F, open.angle =  163, node.depth = 100)
# Create a simple data frame with the variables based on the taxa
oak_section_DATA <- setNames(data$oak_section, data$Synergus)
# Split the names of the variable names and list a new object
oak_sectionxx <- strsplit(as.character(oak_section_DATA), split = "+", fixed = T)
# Create a matrix with the variables from the _DATA file by providing lists of occurrence or absence of particular variables for each taxa
oak_sectionpp <- matrix(0, length(oak_section_DATA), 4, dimnames = list(names(oak_section_DATA), c("Lobatae","Quercus", "Virentes", "Quercus+Virentes")))
# Convert this matrix into a matrix of percentages by marking presence as 1 and divide it by the length of the data frame, effectively providign a value of the proportion
for (i in 1:nrow(oak_sectionpp)) oak_sectionpp[i,oak_sectionxx[[i]]]<-1/length(oak_sectionxx[[i]])
par(fg = "transparent")
# Adding tip labels using this proportional matrix using the previously listed colors
ape::tiplabels(pie = oak_sectionpp, piecol = oak_sectioncols, cex = 0.25)
par(fg = "white")
# Addingthe node labels based on our likely ancestor from the model recapitulation.
nodelabels( node = 1:S$Nnode+Ntip(S),
pie = oak_section.ER$lik.anc, piecol = oak_sectioncols, cex=0.4)
par(fg = "black")
# Providing a legend
legend("bottom", c("Red Oaks (sect. Lobatae)", "White Oaks (sect. Quercus)", "Live Oaks (sect. Virentes)"), pch = 21, pt.bg = c(oak_sectioncols), pt.cex = 2, title = "Oak Section", cex = 1)
# Telling the program we are done creating an image. This results in whatever is plotted being saved
#dev.off()
# First, lets isolate the variable we want to graphically model from the original imported data frame
oak_section <- setNames(data$oak_section, rownames(data))
# Rename the levels of the variable
levels(oak_section) <- unique(data$oak_section)
# Recapitulation of the best fit model (see model selection script)
oak_section.ER <- ace(oak_section, S, model = "ER", type = "discrete")
# The model currenlty includes an intermediate state, let's break this intermediate state into the two discrete traits.
oak_section.ER$lik.anc[,1] <- oak_section.ER$lik.anc[,1] + 1/2*(oak_section.ER$lik.anc[,4])
oak_section.ER$lik.anc[,2] <- oak_section.ER$lik.anc[,2] + 1/2*(oak_section.ER$lik.anc[,4])
oak_section.ER$lik.anc <- data.frame(oak_section.ER$lik.anc[,1],oak_section.ER$lik.anc[,2], oak_section.ER$lik.anc[,3])
# Set colors for the pie charts
oak_sectioncols <- c("firebrick1", "grey50", "dodgerblue")
# Now we have the data organized in a way that makes it accessible to the program and we can begin computing the graphical output of the figure. First, I want to save these automatically as vector graphics, so I'll use this function to initiate it.
#svg("/home/guerbrown/github_local/biol-4386-course-project-guerbrown/output/inqcophy_traitmodeling_oak_section_guerbrown.svg", width = 20, height = 10)
# Plot the tree in a phylo space with the layout of your choosing
plot.phylo(S, type = "fan", cex = 1.1, align.tip.label = F, lwd = 2, label.offset = 0.05, use.edge.length = F, open.angle =  163, node.depth = 100)
# Create a simple data frame with the variables based on the taxa
oak_section_DATA <- setNames(data$oak_section, data$Synergus)
# Split the names of the variable names and list a new object
oak_sectionxx <- strsplit(as.character(oak_section_DATA), split = "+", fixed = T)
# Create a matrix with the variables from the _DATA file by providing lists of occurrence or absence of particular variables for each taxa
oak_sectionpp <- matrix(0, length(oak_section_DATA), 4, dimnames = list(names(oak_section_DATA), c("Lobatae","Quercus", "Virentes", "Quercus+Virentes")))
# Convert this matrix into a matrix of percentages by marking presence as 1 and divide it by the length of the data frame, effectively providign a value of the proportion
for (i in 1:nrow(oak_sectionpp)) oak_sectionpp[i,oak_sectionxx[[i]]]<-1/length(oak_sectionxx[[i]])
par(fg = "transparent")
# Adding tip labels using this proportional matrix using the previously listed colors
ape::tiplabels(pie = oak_sectionpp, piecol = oak_sectioncols, cex = 0.25)
par(fg = "white")
# Addingthe node labels based on our likely ancestor from the model recapitulation.
nodelabels( node = 1:S$Nnode+Ntip(S),
pie = oak_section.ER$lik.anc, piecol = oak_sectioncols, cex=0.4)
par(fg = "black")
# Providing a legend
legend("bottom", c("Red Oaks (sect. Lobatae)", "White Oaks (sect. Quercus)", "Live Oaks (sect. Virentes)"), pch = 21, pt.bg = c(oak_sectioncols), pt.cex = 2, title = "Oak Section", cex = 3)
# Telling the program we are done creating an image. This results in whatever is plotted being saved
#dev.off()
# First, lets isolate the variable we want to graphically model from the original imported data frame
oak_section <- setNames(data$oak_section, rownames(data))
# Rename the levels of the variable
levels(oak_section) <- unique(data$oak_section)
# Recapitulation of the best fit model (see model selection script)
oak_section.ER <- ace(oak_section, S, model = "ER", type = "discrete")
# The model currenlty includes an intermediate state, let's break this intermediate state into the two discrete traits.
oak_section.ER$lik.anc[,1] <- oak_section.ER$lik.anc[,1] + 1/2*(oak_section.ER$lik.anc[,4])
oak_section.ER$lik.anc[,2] <- oak_section.ER$lik.anc[,2] + 1/2*(oak_section.ER$lik.anc[,4])
oak_section.ER$lik.anc <- data.frame(oak_section.ER$lik.anc[,1],oak_section.ER$lik.anc[,2], oak_section.ER$lik.anc[,3])
# Set colors for the pie charts
oak_sectioncols <- c("firebrick1", "grey50", "dodgerblue")
# Now we have the data organized in a way that makes it accessible to the program and we can begin computing the graphical output of the figure. First, I want to save these automatically as vector graphics, so I'll use this function to initiate it.
#svg("/home/guerbrown/github_local/biol-4386-course-project-guerbrown/output/inqcophy_traitmodeling_oak_section_guerbrown.svg", width = 20, height = 10)
# Plot the tree in a phylo space with the layout of your choosing
plot.phylo(S, type = "fan", cex = 1.1, align.tip.label = F, lwd = 2, label.offset = 0.05, use.edge.length = F, open.angle =  163, node.depth = 100)
# Create a simple data frame with the variables based on the taxa
oak_section_DATA <- setNames(data$oak_section, data$Synergus)
# Split the names of the variable names and list a new object
oak_sectionxx <- strsplit(as.character(oak_section_DATA), split = "+", fixed = T)
# Create a matrix with the variables from the _DATA file by providing lists of occurrence or absence of particular variables for each taxa
oak_sectionpp <- matrix(0, length(oak_section_DATA), 4, dimnames = list(names(oak_section_DATA), c("Lobatae","Quercus", "Virentes", "Quercus+Virentes")))
# Convert this matrix into a matrix of percentages by marking presence as 1 and divide it by the length of the data frame, effectively providign a value of the proportion
for (i in 1:nrow(oak_sectionpp)) oak_sectionpp[i,oak_sectionxx[[i]]]<-1/length(oak_sectionxx[[i]])
par(fg = "transparent")
# Adding tip labels using this proportional matrix using the previously listed colors
ape::tiplabels(pie = oak_sectionpp, piecol = oak_sectioncols, cex = 0.25)
par(fg = "white")
# Addingthe node labels based on our likely ancestor from the model recapitulation.
nodelabels( node = 1:S$Nnode+Ntip(S),
pie = oak_section.ER$lik.anc, piecol = oak_sectioncols, cex=0.4)
par(fg = "black")
# Providing a legend
legend("bottom", c("Red Oaks (sect. Lobatae)", "White Oaks (sect. Quercus)", "Live Oaks (sect. Virentes)"), pch = 21, pt.bg = c(oak_sectioncols), pt.cex = 2, title = "Oak Section", cex = 2)
# Telling the program we are done creating an image. This results in whatever is plotted being saved
#dev.off()
# First, lets isolate the variable we want to graphically model from the original imported data frame
oak_section <- setNames(data$oak_section, rownames(data))
# Rename the levels of the variable
levels(oak_section) <- unique(data$oak_section)
# Recapitulation of the best fit model (see model selection script)
oak_section.ER <- ace(oak_section, S, model = "ER", type = "discrete")
# The model currenlty includes an intermediate state, let's break this intermediate state into the two discrete traits.
oak_section.ER$lik.anc[,1] <- oak_section.ER$lik.anc[,1] + 1/2*(oak_section.ER$lik.anc[,4])
oak_section.ER$lik.anc[,2] <- oak_section.ER$lik.anc[,2] + 1/2*(oak_section.ER$lik.anc[,4])
oak_section.ER$lik.anc <- data.frame(oak_section.ER$lik.anc[,1],oak_section.ER$lik.anc[,2], oak_section.ER$lik.anc[,3])
# Set colors for the pie charts
oak_sectioncols <- c("firebrick1", "grey50", "dodgerblue")
# Now we have the data organized in a way that makes it accessible to the program and we can begin computing the graphical output of the figure. First, I want to save these automatically as vector graphics, so I'll use this function to initiate it.
#svg("/home/guerbrown/github_local/biol-4386-course-project-guerbrown/output/inqcophy_traitmodeling_oak_section_guerbrown.svg", width = 20, height = 10)
# Plot the tree in a phylo space with the layout of your choosing
plot.phylo(S, type = "fan", cex = 1.1, align.tip.label = F, lwd = 2, label.offset = 0.05, use.edge.length = F, open.angle =  163, node.depth = 100)
# Create a simple data frame with the variables based on the taxa
oak_section_DATA <- setNames(data$oak_section, data$Synergus)
# Split the names of the variable names and list a new object
oak_sectionxx <- strsplit(as.character(oak_section_DATA), split = "+", fixed = T)
# Create a matrix with the variables from the _DATA file by providing lists of occurrence or absence of particular variables for each taxa
oak_sectionpp <- matrix(0, length(oak_section_DATA), 4, dimnames = list(names(oak_section_DATA), c("Lobatae","Quercus", "Virentes", "Quercus+Virentes")))
# Convert this matrix into a matrix of percentages by marking presence as 1 and divide it by the length of the data frame, effectively providign a value of the proportion
for (i in 1:nrow(oak_sectionpp)) oak_sectionpp[i,oak_sectionxx[[i]]]<-1/length(oak_sectionxx[[i]])
par(fg = "transparent")
# Adding tip labels using this proportional matrix using the previously listed colors
ape::tiplabels(pie = oak_sectionpp, piecol = oak_sectioncols, cex = 0.25)
par(fg = "white")
# Addingthe node labels based on our likely ancestor from the model recapitulation.
nodelabels( node = 1:S$Nnode+Ntip(S),
pie = oak_section.ER$lik.anc, piecol = oak_sectioncols, cex=0.4)
par(fg = "black")
# Providing a legend
legend("bottom", c("Red Oaks (sect. Lobatae)", "White Oaks (sect. Quercus)", "Live Oaks (sect. Virentes)"), pch = 21, pt.bg = c(oak_sectioncols), pt.cex = 3, title = "Oak Section", cex = 2)
# Telling the program we are done creating an image. This results in whatever is plotted being saved
#dev.off()
# First, lets isolate the variable we want to graphically model from the original imported data frame
oak_section <- setNames(data$oak_section, rownames(data))
# Rename the levels of the variable
levels(oak_section) <- unique(data$oak_section)
# Recapitulation of the best fit model (see model selection script)
oak_section.ER <- ace(oak_section, S, model = "ER", type = "discrete")
# The model currenlty includes an intermediate state, let's break this intermediate state into the two discrete traits.
oak_section.ER$lik.anc[,1] <- oak_section.ER$lik.anc[,1] + 1/2*(oak_section.ER$lik.anc[,4])
oak_section.ER$lik.anc[,2] <- oak_section.ER$lik.anc[,2] + 1/2*(oak_section.ER$lik.anc[,4])
oak_section.ER$lik.anc <- data.frame(oak_section.ER$lik.anc[,1],oak_section.ER$lik.anc[,2], oak_section.ER$lik.anc[,3])
# Set colors for the pie charts
oak_sectioncols <- c("firebrick1", "grey50", "dodgerblue")
# Now we have the data organized in a way that makes it accessible to the program and we can begin computing the graphical output of the figure. First, I want to save these automatically as vector graphics, so I'll use this function to initiate it.
svg("/home/guerbrown/github_local/biol-4386-course-project-guerbrown/output/inqcophy_traitmodeling_oak_section_guerbrown.svg", width = 20, height = 10)
# Plot the tree in a phylo space with the layout of your choosing
plot.phylo(S, type = "fan", cex = 1.1, align.tip.label = F, lwd = 2, label.offset = 0.05, use.edge.length = F, open.angle =  163, node.depth = 100)
# Create a simple data frame with the variables based on the taxa
oak_section_DATA <- setNames(data$oak_section, data$Synergus)
# Split the names of the variable names and list a new object
oak_sectionxx <- strsplit(as.character(oak_section_DATA), split = "+", fixed = T)
# Create a matrix with the variables from the _DATA file by providing lists of occurrence or absence of particular variables for each taxa
oak_sectionpp <- matrix(0, length(oak_section_DATA), 4, dimnames = list(names(oak_section_DATA), c("Lobatae","Quercus", "Virentes", "Quercus+Virentes")))
# Convert this matrix into a matrix of percentages by marking presence as 1 and divide it by the length of the data frame, effectively providign a value of the proportion
for (i in 1:nrow(oak_sectionpp)) oak_sectionpp[i,oak_sectionxx[[i]]]<-1/length(oak_sectionxx[[i]])
par(fg = "transparent")
# Adding tip labels using this proportional matrix using the previously listed colors
ape::tiplabels(pie = oak_sectionpp, piecol = oak_sectioncols, cex = 0.25)
par(fg = "white")
# Addingthe node labels based on our likely ancestor from the model recapitulation.
nodelabels( node = 1:S$Nnode+Ntip(S),
pie = oak_section.ER$lik.anc, piecol = oak_sectioncols, cex=0.4)
par(fg = "black")
# Providing a legend
legend("bottom", c("Red Oaks (sect. Lobatae)", "White Oaks (sect. Quercus)", "Live Oaks (sect. Virentes)"), pch = 21, pt.bg = c(oak_sectioncols), pt.cex = 3, title = "Oak Section", cex = 2)
# Telling the program we are done creating an image. This results in whatever is plotted being saved
dev.off()
hairs <- setNames(data$hairs, rownames(data))
levels(hairs) <- unique(data$hairs)
hairs.ER <- fitpolyMk(S, hairs, model = "ER")
hairsxx <- apply(hairs.ER$data,1,
function(x,ss) ss[which(x==1)],
ss=colnames(hairs.ER$data))
hairsxx <- gsub("+","/", hairsxx, fixed=TRUE)
hairs.data <- data.frame(Genus_sp = names(hairsxx), hairs = hairsxx)
hairs_rate.mat <- hairs.ER$index.matrix
hairs_rate.mat[hairs_rate.mat==0] <- NA
colnames(hairs_rate.mat) <- rownames(hairs_rate.mat) <- gsub("+","/", colnames(hairs_rate.mat), fixed=TRUE)
hairsind <- order(colnames(hairs_rate.mat))
hairs_rate.mat <- hairs_rate.mat[hairsind, hairsind]
hairs_fit.marginal <- corHMM(S, hairs.data,
rate.mat = hairs_rate.mat,
node.states = "marginal",
rate.cat = 1, p = hairs.ER$rates,
root.p = hairs.ER$pi)
hairsasr <- hairs_fit.marginal$states
colnames(hairsasr) <- colnames(hairs_rate.mat)
colnames(hairsasr) <- gsub("/","+", colnames(hairsasr))
svg("/home/guerbrown/github_local/biol-4386-course-project-guerbrown/output/inqcophy_traitmodeling_hairs_guerbrown.svg", width = 20, height = 10)
hairspp <- matrix(0, length(hairs), 3, dimnames = list(names(hairs), c("0", "1", "1+0")))
plot.phylo(S, type = "fan", cex = 1.1, align.tip.label = F, lwd = 2, label.offset = 0.05, use.edge.length = F, open.angle =  163, node.depth = 100)
hairsX <- strsplit(setNames(as.character(hairs_rate.mat), names(hairs_rate.mat)),"+", fixed=TRUE)
pies <- matrix(0, Ntip(S),2,
dimnames=list(S$tip.label,
c("0", "1")))
for(i in 1:Ntip(S))
pies[S$tip.label[i],
hairsX[[S$tip.label[i]]]]<-
rep(1/length(hairsX[[S$tip.label[i]]]),
length(hairsX[[S$tip.label[i]]]))
hairscols <- setNames(c("firebrick1", "dodgerblue1", "grey15"),
c("0", "1"))
par(fg="white")
hairs <- setNames(data$hairs, data$Synergus)
hairsxx <- strsplit(as.character(hairs), split = "+", fixed = T)
hairspp <- matrix(0, length(hairs), 3, dimnames = list(names(hairs), c("0", "1", "1+0")))
for (i in 1:nrow(hairspp)) hairspp[i,hairsxx[[i]]]<-1/length(hairsxx[[i]])
tiplabels(pie = hairspp, piecol = hairscols, cex=0.3)
par(fg="white")
piecol <- hairscols
for(i in 1:ncol(hairsasr)){
hairsnn <- strsplit(colnames(hairsasr)[i],"+", fixed=TRUE)[[1]]
if(length(hairsnn)==1) piecol[i] <- hairscols[hairsnn]
else if(length(hairsnn)==2) piecol[i] <- colorRampPalette(hairscols[hairsnn])(3)[2]
else piecol[i]<-"black"
}
names(piecol)<-colnames(hairsasr)
par(fg="white")
nodelabels(pie = hairsasr, piecol = hairscols,cex=0.40)
par(fg="black")
legend("bottom", c("Hairless", "Hairy"), pch = 21, pt.bg = c("firebrick1", "dodgerblue1"), pt.cex = 3, cex = 2)
dev.off()
spines <- setNames(data$spines, rownames(data))
levels(spines) <- unique(data$spines)
spines.ER <- fitpolyMk(S, spines, model = "ER")
spinesxx <- apply(spines.ER$data,1,
function(x,ss) ss[which(x==1)],
ss=colnames(spines.ER$data))
spinesxx <- gsub("+","/", spinesxx, fixed=TRUE)
spines.data <- data.frame(Genus_sp = names(spinesxx), spines = spinesxx)
spines_rate.mat <- spines.ER$index.matrix
spines_rate.mat[spines_rate.mat==0] <- NA
colnames(spines_rate.mat) <- rownames(spines_rate.mat) <- gsub("+","/", colnames(spines_rate.mat), fixed=TRUE)
spinesind <- order(colnames(spines_rate.mat))
spines_rate.mat <- spines_rate.mat[spinesind, spinesind]
spines_fit.marginal <- corHMM(S, spines.data,
rate.mat = spines_rate.mat,
node.states = "marginal",
rate.cat = 1, p = spines.ER$rates,
root.p = spines.ER$pi)
spinesasr <- spines_fit.marginal$states
colnames(spinesasr) <- colnames(spines_rate.mat)
colnames(spinesasr) <- gsub("/","+", colnames(spinesasr))
svg("/home/guerbrown/github_local/biol-4386-course-project-guerbrown/output/inqcophy_traitmodeling_spines_guerbrown.svg", width = 20, height = 10)
spinespp <- matrix(0, length(spines), 3, dimnames = list(names(spines), c("0", "1", "1+0")))
plot.phylo(S, type = "fan", cex = 1.1, align.tip.label = F, lwd = 2, label.offset = 0.05, use.edge.length = F, open.angle =  163, node.depth = 100)
spinesX <- strsplit(setNames(as.character(spines_rate.mat), names(spines_rate.mat)),"+", fixed=TRUE)
pies <- matrix(0, Ntip(S),2,
dimnames=list(S$tip.label,
c("0", "1")))
for(i in 1:Ntip(S))
pies[S$tip.label[i],
spinesX[[S$tip.label[i]]]]<-
rep(1/length(spinesX[[S$tip.label[i]]]),
length(spinesX[[S$tip.label[i]]]))
spinescols <- setNames(c("firebrick1", "dodgerblue1", "grey15"),
c("0", "1", "1+0"))
par(fg="white")
spines <- setNames(data$spines, data$Synergus)
spinesxx <- strsplit(as.character(spines), split = "+", fixed = T)
spinespp <- matrix(0, length(spines), 3, dimnames = list(names(spines), c("0", "1", "1+0")))
for (i in 1:nrow(spinespp)) spinespp[i,spinesxx[[i]]]<-1/length(spinesxx[[i]])
tiplabels(pie = spinespp, piecol = spinescols, cex=0.3)
par(fg="white")
piecol <- spinescols
for(i in 1:ncol(spinesasr)){
spinesnn <- strsplit(colnames(spinesasr)[i],"+", fixed=TRUE)[[1]]
if(length(spinesnn)==1) piecol[i] <- spinescols[spinesnn]
else if(length(spinesnn)==2) piecol[i] <- colorRampPalette(spinescols[spinesnn])(3)[2]
else piecol[i]<-"black"
}
names(piecol)<-colnames(spinesasr)
par(fg="white")
nodelabels(pie = spinesasr, piecol = spinescols,cex=0.40)
par(fg="black")
legend("bottom", c("No Spines", "Spines"), pch = 21, pt.bg = c("firebrick1", "dodgerblue1"), pt.cex = 3, cex = 2)
dev.off()
